package main

import (
        "bytes"
        "context"
        "encoding/json"
        "fmt"
        "io"
        "net/http"
        "os"
        "strings"
        "time"
        "github.com/CyCoreSystems/ari/v6"
        "github.com/CyCoreSystems/ari/v6/client/native"
        "github.com/CyCoreSystems/ari/v6/ext/play"
        "github.com/CyCoreSystems/ari/v6/ext/record"
        "github.com/openai/openai-go"
        "github.com/openai/openai-go/option"
)

////////////////////////////////////////////////////
//// begin global constants & variables ////////////

// // define constants ////

// // Telnyx SMS URL
const telnyxUrl = "https://api.telnyx.com/v2/messages"
const telnyxUrlGroup = "https://api.telnyx.com/v2/messages/group_mms"

// // default implicit recordings directory
const recordingDir = "/opt/pbxware/pw/var/spool/asterisk/recording/"

// // minimum arguments needed
const minArgs = 5

// // maximum silence time for recording in seconds
const maxRecordingSilence = 4

// // maximum recording time in seconds
const maxRecordingTime = 40

// // when doing multiple instances with different command-line arguments, the env value does not always seem to be passed, so add explicitly as below
const oaiKey = "yourOPenAIKEY"

// // when doing multiple instances with different command-line arguments, the env value does not always seem to be passed, so add explicitly as below
const telnyxKey = "YOURTELNYXKEY"

// // constants for openAI Transcription errors
const noTranscription = "No transcription"
const noAudio = "No audio"

// //
const  noCallbackNum = "nocallbacknum"

// // define variables to be replaced by command-line arguments
var ariIP string                                //// IP address that the ARI will be listened for on
var ariUser string                              //// ARI Username
var ariPass string                              //// ARI Password
var ariAppName string                           //// ARI app name
var ariTenant string                            //// Tenant number (1 if Call Centre or Business Edition)
var SMSName string = "ARI Application"          //// Name to add to the sent SMS
var SMSTo = "+15555555555"                      //// a valid e.164 formatted SMS DID (or comma-separated list)
var SMSFrom = "+15555555556"                    //// a valid e.164 formatted SMS DID associated with the SMS profile
var allowCallback = "callbacknum"               //// anything other than matching noCallbackNum will be considered as callbacknum
var ariStyle = "transcribe"                     //// anything other than 'translate' will be considered 'transcribe'
var logfile = "/path/to/your/arilogfile"        //// need to arrange log rotation

// // DMTF instructions filename
var dtmfInstructions = "greeting-enter_pound_or_number"         //// may be replaced at command line, file must exist : recording prompt to enter # or callback number+#

// // Recording instructions filename
var recordingInstructions = "greeting-message_after_beep"       //// may be replaced at command line, file must exist : recording prompt to record message and press pound or hangup

// // Goodbye filename
var goodbyeSound = "greeting-thankyou"          //// may be replaced at command line, file must exist : recording to terminate the app if caller has not already hung up

// // add option to also send to email with file as attachment ?
// // since attaching to MMS currently requires having the file public-available on web . . .

// // verbosity = "verbose" : log lines will be echoed to stdout / any other value : lines will be logged only
var verbosity = "silent"        //// may be replaced at command line, anything other than 'verbose' will be considered silent

// // end variables to be replaced by command-line arguments
///////////////////////////////

// // recording subdirectory, appended to recordingDir = "/opt/pbxware/pw/var/spool/asterisk/recording/"
// // to make managing the recording files simpler : find . . . -exec rm {} \;
var recordingSubDir = "ari"

// // name of the executable file : to be replaced at runtime
var myName = "executable"

//// end global constants & variables ////////////
//////////////////////////////////////////////////

func main() {

        iargs := os.Args

        nameParts := strings.Split(iargs[0],"/")
        myName = nameParts[len(nameParts)-1]

        //// if there are enough (minArgs) arguments, assign them and proceed
        if len(iargs) >= minArgs+1 {

                ariIP = iargs[1]
                ariUser = iargs[2]
                ariPass = iargs[3]
                ariAppName = iargs[4]
                ariTenant = iargs[5]

                //// if there are more args, assign them to the appropriate globals
                if len(iargs) > minArgs+1 {
                        for i := minArgs + 1; i <= len(iargs)-1; i++ {
                                if iargs[i] != "-" {
                                        switch i {
                                        case 6:
                                                SMSName = iargs[i]
                                        case 7:
                                                SMSTo = iargs[i]
                                        case 8:
                                                SMSFrom = iargs[i]
                                        case 9:
                                                allowCallback = iargs[i]
                                        case 10:
                                                ariStyle = iargs[i]
                                        case 11:
                                                logfile = iargs[i]
                                        case 12:
                                                dtmfInstructions = iargs[i]
                                        case 13:
                                                recordingInstructions = iargs[i]
                                        case 14:
                                                goodbyeSound = iargs[i]
                                        case 15:
                                                verbosity = iargs[i]
                                        }
                                }
                        }
                }

                //// prepare the context
                cntxt, cancel := context.WithCancel(context.Background())
                defer cancel()

                logit("Connecting to ARI", "info", "")

                //// prepare the ARI client
                ariclient, err := native.Connect(&native.Options{
                        Application:  ariAppName,
                        Username:     ariUser,
                        Password:     ariPass,
                        URL:          fmt.Sprintf("http://%s:8088/ari", ariIP),
                        WebsocketURL: fmt.Sprintf("ws://%s:8088/ari/events", ariIP),
                })
                if err != nil {
                        logit("Failed to build native ARI client", "error", fmt.Sprintf("%v", err))
                        return
                }

                logit("Listening for calls", "info", "")

                //// subscribe to StasisStart events
                sub := ariclient.Bus().Subscribe(nil, "StasisStart")

                //// wait for 'StasisStart' events, (incoming call)
                for {
                        select {
                        case e := <-sub.Events():
                                v := e.(*ari.StasisStart)

                                // get CID Info, etc
                                ChanID := v.Channel.ID
                                ChanName := v.Channel.Name
                                CIDNumber := strings.TrimLeft(v.Channel.Caller.Number, "+") //// remove a potential leading + from CIDNumber
                                CIDName := v.Channel.Caller.Name

                                logit("Received StasisStart", "channel", fmt.Sprintf("%v %v - %v <%v>", ChanID, ChanName, CIDName, CIDNumber))

                                //// handle the individual call
                                go handleCall(cntxt, ariclient.Channel().Get(v.Key(ari.ChannelKey, v.Channel.ID)), CIDNumber, CIDName, ChanName, ariTenant)

                        case <-cntxt.Done():
                                return
                        }
                }

        } else { //// not enough arguments supplied, show usage
                usage(myName, fmt.Sprintf("Insufficient Arguments, needs at least %v", minArgs))
        }
}

//////// Main call handling function
func handleCall(cntxt context.Context, h *ari.ChannelHandle, cid string, cname string, channame string, tenant string) {

        defer h.Hangup()

        cntxt, cancel := context.WithCancel(cntxt)
        defer cancel()

        end := h.Subscribe(ari.Events.StasisEnd)
        defer end.Cancel()

        go func() {
                <-end.Events()
                cancel()
        }()

        if err := h.Answer(); err != nil {
                logit("Failed to answer", "error", fmt.Sprintf("%v", err))
                return
        }

        //logit("New call started", "channel", fmt.Sprintf("%v", h.ID()))

        var callBack string
        var newNum = "#"

        //// if allowCallback has not been set to match noCallbackNum, get an alternat callback number
        if allowCallback != noCallbackNum {
                newNum = getDTMF(cntxt, h, tenant)
        } else {
                //// pause so the 'Record you message . . .' is not clipped at the beginning
                time.Sleep(1*time.Second)
        }

        //// if a new number was entered, copy it to callBack, otherwise keep the CID
        if newNum == "#" {
                callBack = cid
        } else {
                callBack = strings.TrimRight(newNum, "#")
        }

        //// record message
        //// supply filename with directory info (date-time-channel_name) /opt/pbxware/pw/var/spool/asterisk/recording/ is implicit
        //// here we set ari/tenant#/date-time-[ChannelName (1) split on /]
        //// so we get a subdirectory ari, another subdirectory for the individual tenant
        tenantDir := fmt.Sprintf("/%v",tenant)
        if tenant == "1" {
                tenantDir = ""
        }
        
        recName := strings.ReplaceAll(strings.ReplaceAll(strings.ReplaceAll(fmt.Sprintf("%v%v/%v-%v", recordingSubDir, tenantDir, strings.ReplaceAll(strings.Split(fmt.Sprintf("%v", time.Now()), ".")[0], " ", "-"), strings.Split(channame, "/")[1]),"*","s"),";","-"),":","-")
        recordIt(cntxt, h, recName, tenant)
        time.Sleep(1 * time.Second)

        //// Transcribe with openAI
        transcript := oiaTranscribe(fmt.Sprintf("%v%v.wav", recordingDir, recName))

        //// only send SMS if there is a transcription
        if (transcript != noTranscription) && (transcript != noAudio) {
                //// only show thw callback line if it is needed (allowCallback != noCallbackNum)
                var callBackLine = ""
                if allowCallback != noCallbackNum {
                        callBackLine = fmt.Sprintf("\nCallback :%v",callBack)
                }
                //// prepare the transcription to be sent as SMS, adding Date/Time, Caller ID, CallBack Number and the AI disclaimer
                smsMessage := fmt.Sprintf("%v\n\n%v\n%v <%v>%v\n\n%v\n\n**Transcribed by openAI**", SMSName, strings.Split(fmt.Sprintf("%v", time.Now()), ".")[0], cname, cid, callBackLine, transcript)
                //// Send transcription as SMS

                //// Send SMS as a native go function
                if strings.Contains(SMSTo,",") {
                        telnyxSendGroup(smsMessage)
                } else {
                        telnyxSendIndiv(smsMessage)
                }

        } else {
                logit("No transcription, SMS will not be sent","error",transcript)
        }

        //// directory qualifier for Multi-Tenant (ex '202/' for a file in Tenant 202's custom directory)
        xdir := fmt.Sprintf("%v/", tenant)
        //// if tenant = 1, it is a Call Centre or Business Stand-alone . . . so no Tenant
        if tenant == "1" {
                xdir = ""
        }

        if err := play.Play(cntxt, h, play.URI(fmt.Sprintf("sound:%v%v", xdir, goodbyeSound))).Err(); err != nil {
                logit("Failed to play sound file", "error", fmt.Sprintf("%v", err))
                return
        }

        logit("Call completed", "info", fmt.Sprintf("%v", h.ID()))
}

//////// Secondary functions

func recordIt(cntxt context.Context, h *ari.ChannelHandle, recname string, tenant string) {

        //// directory qualifier for Multi-Tenant (ex '202/' for a file in Tenant 202's custom directory)
        xdir := fmt.Sprintf("%v/", tenant)
        //// if tenant = 1, it is a Call Centre or Business Stand-alone . . . so no Tenant
        if tenant == "1" {
                xdir = ""
        }

        if err := play.Play(cntxt, h, play.URI(fmt.Sprintf("sound:%v%v", xdir, recordingInstructions))).Err(); err != nil {
                logit("Failed to play file", "error", fmt.Sprintf("%v", err))
                return
        }

        //// pause before the beep
        time.Sleep(500 * time.Millisecond)

        //// start the recording
        rslt, err := record.Record(cntxt, h, record.Format("wav"), record.MaxDuration(maxRecordingTime*time.Second), record.MaxSilence(maxRecordingSilence*time.Second), record.IfExists("overwrite"), record.Beep(), record.TerminateOn("#")).Result()
        if err != nil {
                logit("Failed to record", "error", fmt.Sprintf("%v", err))
                return
        }

        //// save recording to file
        if err := rslt.Save(fmt.Sprintf("%v", recname)); err != nil {
                logit(fmt.Sprintf("Failed to record %v.wav", recname), "error", "")
        } else {
                logit(fmt.Sprintf("Recorded %v.wav", recname), "info", "")
        }
}

// // used in develpment only, reads back supplied digits
func readDigits(cntxt context.Context, h *ari.ChannelHandle, cid string) {

        logit("Reading Digits", "channel", fmt.Sprintf("%v - %v", cid, h.ID()))

        digitList := strings.Split(cid, "")
        for i := 0; i < len(digitList); i++ {
                if err := play.Play(cntxt, h, play.URI(fmt.Sprintf("digits:%v", digitList[i]))).Err(); err != nil {
                        logit(fmt.Sprintf("Failed to play digit file : %v", digitList[i]), "error", fmt.Sprintf("%v", err))
                        return
                }
        }
}

func getDTMF(cntxt context.Context, h *ari.ChannelHandle, tenant string) string {

        //// directory qualifier for Multi-Tenant (ex '202/' for a file in Tenant 202's custom directory)
        xdir := fmt.Sprintf("%v/", tenant)
        //// if tenant = 1, it is a Call Centre or Business Stand-alone . . . so no Tenant
        if tenant == "1" {
                xdir = ""
        }

        dtmfrtrn := ""

        dtmf := h.Subscribe(ari.Events.ChannelDtmfReceived)

        if err := play.Play(cntxt, h, play.URI(fmt.Sprintf("sound:%v%v", xdir, dtmfInstructions))).Err(); err != nil {
                logit("Failed to play file", "error", fmt.Sprintf("%v", err))
                return "#"
        }

        for {
                select {
                case event := <-dtmf.Events():
                        ev := event.(*ari.ChannelDtmfReceived)
                        //// add the dtmf value to the return value
                        dtmfrtrn += ev.Digit
                        //logit(ev.Digit, "dtmf", dtmfrtrn)
                        if ev.Digit == "#" {
                                logit(ev.Digit, "dtmf", dtmfrtrn)
                                return dtmfrtrn
                        } else if len(dtmfrtrn) > 11 {
                                dtmfrtrn += "#"
                                return dtmfrtrn
                        }
                //// avoid no '#' entry, getting us stuck in this loop, limit to 4 seconds run time with no dtmf entry
                case <-time.After(4 * time.Second):
                        logit("No DTMF (#) before timeout", "dtmf", "")
                        dtmfrtrn += "#"
                        return dtmfrtrn
                }
        }

        //// just in case
        if dtmfrtrn == "" {
                dtmfrtrn = "#"
        }

        return dtmfrtrn
}

func oiaTranscribe(fname string) string {
        trtrn := ""

        //// prepare the openAI client & context
        //oaiclient := openai.NewClient()
        //// it seems that when multiple instances with different command line arguments, the automauic OPENAI_API_KEY from env doesn't work . . .
        oaiclient := openai.NewClient(option.WithHeader("Authorization","Bearer "+oaiKey))
        cntxt := context.Background()

        // open the recorded file
        rfile, err := os.Open(fname)
        //rfile, err := os.Open("sound/Bulgarian.wav")
        if err != nil {
                logit("Failed to open recording file for transcription", "error", fmt.Sprintf("%v", err))
                return noAudio
        } else {
                logit(fmt.Sprintf("Opened %v successfully for transcription", fname),"info","")
        }

        //// perform the transcription
	//// check if translation is required
        if(ariStyle == "translate") { //// translate to english
                trfile, err := os.Open(fname)
                if err != nil {
                        logit("Failed to open recording file for translation", "error", fmt.Sprintf("%v", err))
                        return noAudio
                } else {
                        logit(fmt.Sprintf("Opened %v successfully for translation", fname),"info","")
                }

                translation, err := oaiclient.Audio.Translations.New(cntxt, openai.AudioTranslationNewParams{
                        Model: openai.F(openai.AudioModelWhisper1),
                        File:  openai.F[io.Reader](trfile),
                        Prompt: openai.F("translate to english"),
                        ResponseFormat: openai.F(openai.AudioResponseFormatJSON),
                        Temperature: openai.F(0.200000),
                })
                if err != nil {
                        logit("Failed to transcribe recording file", "error", fmt.Sprintf("%v", err))
                        return noTranscription
                } else {
                        logit("Translated recording file", "info","")
                }
                trtrn = fmt.Sprintf("%v\n\nOriginal:\n",translation.Text)
                //return translation.Text
        }
        //// simply transcribe and add to the translation if it exists
        transcription, err := oaiclient.Audio.Transcriptions.New(cntxt, openai.AudioTranscriptionNewParams{
                Model: openai.F(openai.AudioModelWhisper1),
                File:  openai.F[io.Reader](rfile),
        })
        if err != nil {
                logit("Failed to transcribe recording file", "error", fmt.Sprintf("%v", err))
                return noTranscription
        } else {
                logit("Transcribed recording file", "info","")
        }
        trtrn = fmt.Sprintf("%v%v",trtrn,transcription.Text)
                //return transcription.Text

        return trtrn
}

func telnyxSendGroup(msg string) { // sent as group (max 8)


        SMSToList := strings.Split(SMSTo,",")

        //// Create request payload : from & to are global variables (potentially assigned as command-line arguments)
        payload := map[string]interface{}{
                "from": SMSFrom,
                "to":   SMSToList,
                //"subject": subj,
                "text": msg,
        }

        //// format the payload for json
        jPayload, err := json.Marshal(payload)
        if err != nil {
                logit("Unable to format SMS payload for JSON", "error", fmt.Sprintf("%v", err))
        }

        //// prepare the request
        req, err := http.NewRequest("POST", telnyxUrlGroup, bytes.NewBuffer(jPayload))
        if err != nil {
                logit("Unable to create SMS http request", "error", fmt.Sprintf("%v", err))
        }

        //// prepare headers
        req.Header.Set("Content-Type", "application/json")
        req.Header.Set("Authorization", "Bearer "+telnyxKey)

        //// Send the request
        client := &http.Client{}
        resp, err := client.Do(req)
        if err != nil {
                logit("Unable to send SMS http request", "error", fmt.Sprintf("%v", err))
        }
        defer resp.Body.Close()

        //// Check http response
        if resp.StatusCode != http.StatusOK {
                logit("SMS http request failed", "error", fmt.Sprintf("%v - %v", err, resp.StatusCode))
        } else {
                logit("SMS http request successful", "info", SMSFrom+" -> "+fmt.Sprintf("%v",SMSToList))
        }
}

func telnyxSendIndiv(msg string) { // sent individually

        //// if DIDs are separated by ':', we want to send individually, not as a group.
        SMSToList := strings.Split(SMSTo,":")

        for i:= 0;i<len(SMSToList);i++ {

                //// Create request payload : from & to are global variables (potentially assigned as command-line arguments)
                payload := map[string]interface{}{
                        "from": SMSFrom,
                        "to":   SMSToList[i],
                        //"subject": subj,
                        "text": msg,
                }

                //// format the payload for json
                jPayload, err := json.Marshal(payload)
                if err != nil {
                        logit("Unable to format SMS payload for JSON", "error", fmt.Sprintf("%v", err))
                }

                //// prepare the request
                req, err := http.NewRequest("POST", telnyxUrl, bytes.NewBuffer(jPayload))
                if err != nil {
                        logit("Unable to create SMS http request", "error", fmt.Sprintf("%v", err))
                }

                //// prepare headers
                req.Header.Set("Content-Type", "application/json")
                req.Header.Set("Authorization", "Bearer "+telnyxKey)

                //// Send the request
                client := &http.Client{}
                resp, err := client.Do(req)
                if err != nil {
                        logit("Unable to send SMS http request", "error", fmt.Sprintf("%v", err))
                }
                defer resp.Body.Close()

                //// Check http response
                if resp.StatusCode != http.StatusOK {
                        logit("SMS http request failed", "error", fmt.Sprintf("%v - %v", err, resp.StatusCode))
                } else {
                        logit("SMS http request successful", "info", SMSFrom+" -> "+SMSToList[i])
                }
        }
}

func logit(inf string, typ string, errr string) {
        tnow := strings.Split(time.Now().String(), " ")
        dtstr := fmt.Sprintf("%v %v %v %v", tnow[0], tnow[1], tnow[2], tnow[3])
        logline := fmt.Sprintf("%v|%v|%v|%v|%v\n", dtstr, typ, inf, errr, ariAppName)

        //// print to stdout, if verbose is set
        if verbosity == "verbose" {
                fmt.Println(logline)
        }

        //// write to the logfile
        fl, err := os.OpenFile(logfile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
        if err != nil {
                usage(myName, fmt.Sprintf("Unable to open logfile : %v", logfile))
        }
        defer fl.Close()
        if _, err := fl.WriteString(logline); err != nil {
                usage(myName, fmt.Sprintf("Unable to write logfile : %v", logfile))
        }

}

func usage(slf string, wh string) {
        fmt.Printf("\n%v\n\nUsage :\n\n\t%v IP User Pass AppName Tenant [\"SMS Name\"|-] [SMS_To|List|-] [SMS_From|-] [callbacknum|nocallbacknum|-] [transcribe|translate|-] [LogFile|-] [DTMF_Instructions_File|-] [Recording_Instructions_File|-] [Goodbye_Sound|-] [verbose|silent|-]\n\n\t%v 127.0.0.1 ariuser aripass ariapp 999 \"Sender Name\" +15555555555 +15556667777 callbacknum transcribe /var/log/ari_log.txt dtmf_instuctions recording_instructions goodbye_sound_file silent\n\n\t%v 127.0.0.1 ariuser aripass ariapp 999 - - - - - - - - - -\n\n", wh, slf, slf, slf)
}
